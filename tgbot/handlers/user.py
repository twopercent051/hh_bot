from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext

from tgbot.misc.states import *
from tgbot.misc.hh_requester import main_request
from tgbot.keyboards.inline import *
from tgbot.keyboards.reply import *
from tgbot.models.db_connector import *
from create_bot import bot, admin_list


import json

async def user_start(message: Message):
    text = [
        '‚ö†Ô∏è–ü—Ä–µ–∂–¥–µ, —á–µ–º –º—ã –Ω–∞—á–Ω–µ–º:',
        '\n',
        '\n',
        '–ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è.',
        '\n',
        '\n',
        '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞ –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –º–æ–∂–Ω–æ –±–µ–∑ —É–∫–∞–∑—ã–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö',
        '–¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏, —Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å –í–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä',
        '–¥–ª—è —Å–≤—è–∑–∏. –ù–æ —ç—Ç–æ —Å–∏–ª—å–Ω–æ –ø–æ–∑–∂–µ, –∞ –ø–æ–∫–∞ –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –º–µ—á—Ç—ãüòä.'
    ]
    keyboard = main_user_menu_kb()
    user_id = message.from_user.id
    username = message.from_user.username
    check_user = await is_user(user_id)
    if check_user == False:
        await create_user(user_id, username)
    await message.answer(' '.join(text), reply_markup=keyboard)


async def search_field(callback: CallbackQuery):
    text = [
        '–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –≥–æ—Ä–æ–¥',
        '–í—ã –º–æ–∂–µ—Ç–µ –Ω–µ –≤–≤–æ–¥–∏—Ç—å –≥–æ—Ä–æ–¥, —Ç–æ–≥–¥–∞ –º—ã –Ω–∞–π–¥–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω—ã'
    ]
    keyboard = reset_kb()
    await FSMSearch.field.set()
    await bot.answer_callback_query(callback.id)
    await callback.message.answer('\n'.join(text))


async def searcher(message: Message):
    req_field = message.text
    vac_list = await main_request(req_field)
    for vac in vac_list:
        text = [
            f'<b>–í–ê–ö–ê–ù–°–ò–Ø</b>: {vac["title"]}',
            f'<b>–ó–ê–†–ü–õ–ê–¢–ê</b>: {vac["salary"]}',
            f'<b>–ì–û–†–û–î</b>: {vac["city"]}',
            vac['description'],
            '<b>–¢—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b>',
            vac['experience'],
            '<b>–ó–∞–Ω—è—Ç–æ—Å—Ç—å:</b>',
            vac['employment'],
            '<b>–ì—Ä–∞—Ñ–∏–∫:</b>',
            vac['schedule'],
        ]
        keyboard = send_request_kb(vac['vac_id'])
        await message.answer('\n'.join(text), reply_markup=keyboard)


async def get_user_contact(callback: CallbackQuery, state: FSMContext):
    text = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∞ —Ç–∞–∫ –∂–µ –≤–æ–∑—Ä–∞—Å—Ç. HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è'
    async with state.proxy() as data:
        data['user_id'] = callback.from_user.id
        if callback.from_user.username is not None:
            data['username'] = f'@{callback.from_user.username}'
        else:
            data['username'] = ''
        data['vac_id'] = str(callback.data).split(':')[1]
    keyboard = reset_kb()
    await FSMSearch.contacts.set()
    await bot.answer_callback_query(callback.id)
    await callback.message.answer(text)


async def send_request_to_admin(message: Message, state: FSMContext):
    user_text = '–°–ø–∞—Å–∏–±–æ–º –∑–∞ –æ—Ç–∫–ª–∏–∫! –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.'
    async with state.proxy() as data:
        user_id = data.as_dict()['user_id']
        username = data.as_dict()['username']
        vac_id = data.as_dict()['vac_id']
    vac_link = f'https://hh.ru/vacancy/{vac_id}'
    admin_text = [
        '‚ö†Ô∏è‚ö†Ô∏è–ù–û–í–´–ô –û–¢–ö–õ–ò–ö –ù–ê –í–ê–ö–ê–ù–°–ò–Æ ‚ö†Ô∏è‚ö†Ô∏è',
        f'<b>–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:</b> {message.text}',
        f'<b>–ù–∏–∫–Ω–µ–π–º –≤ –¢–µ–ª–µ–≥—Ä–∞–º:</b> {username}',
        f'<b>–í–∞–∫–∞–Ω—Å–∏—è:</b> {vac_link}'
    ]
    user_keyboard = continue_searching()
    await create_request(user_id, username, message.text, vac_id)
    await message.answer(user_text, reply_markup=user_keyboard)
    for admin_id in admin_list:
        await bot.send_message(admin_id, '\n'.join(admin_text), disable_web_page_preview=True)





def register_user(dp: Dispatcher):
    dp.register_message_handler(user_start, commands=["start"], state="*")
    dp.register_message_handler(searcher, content_types='text', state=FSMSearch.field)
    dp.register_message_handler(send_request_to_admin, content_types='text', state=FSMSearch.contacts)

    dp.register_callback_query_handler(search_field, lambda x: x.data in ['main_search', 'home', 'continue_searching'],
                                       state='*')
    dp.register_callback_query_handler(get_user_contact, lambda x: x.data.split(':')[0] == 'send_request', state='*')

